#!/usr/bin/env bash

# In Docker without --privileged, runlevel will return 'unknown'; with --privileged, it seems to return a max of 2
required_runlevel=2

function .log() {
  logger -s -t wait-for-boot $@
}

function .is-booted() {
  local current_runlevel="$(.runlevel)"
  if [ -z "$current_runlevel" -o "$current_runlevel" == "unknown" ]; then
    return 0
  elif [ $current_runlevel -ge $required_runlevel ]; then
    return 0
  else
    return 1
  fi
}

function .runlevel() {
  if runlevel 2>/dev/null | grep -qP '^unknown$' ; then
    echo unknown
  else
    runlevel 2>/dev/null | awk '{print $2;}'
  fi
}

function .await-boot() {
  local i=0
  local iteration
  local max_retries="${1:-10}"
  local sleep_time="${2:-5}"

  while ! .is-booted && [ $i -lt $max_retries ]; do
    iteration=$(($i + 1)) # the nth iteration, one-based

    printf "[%02d/%02d] waiting %ds for system to reach runlevel ${required_runlevel}...\n" \
      $iteration $max_retries $sleep_time

    sleep $sleep_time

    i=$iteration
  done

  if ! service selinux-remount start &>/dev/null ; then
    service selinux-remount start
  fi

  if .is-booted ; then
    echo "Host has reached runlevel ${required_runlevel}."
  else
    echo "ERROR: Host failed to reach runlevel ${required_runlevel}." >&2
    return 1
  fi
}

function .main() {
  .await-boot
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  set -e
  .main "$@"
fi
